#pragma once

typedef struct {
	void (*append_u8)(Compiler_Context* cc, void* b, uint8_t value);
	void (*append_u16)(Compiler_Context* cc, void* b, uint16_t value);
	void (*append_u32)(Compiler_Context* cc, void* b, uint32_t value);
	void (*append_u64)(Compiler_Context* cc, void* b, uint64_t value);
} X86_64_Machine_Code_Writer;

typedef enum {
	X86_64_OPERAND_REGISTER_rax = 0,
	X86_64_OPERAND_REGISTER_rcx,
	X86_64_OPERAND_REGISTER_rdx,
	X86_64_OPERAND_REGISTER_rbx,
	X86_64_OPERAND_REGISTER_rsp,
	X86_64_OPERAND_REGISTER_rbp,
	X86_64_OPERAND_REGISTER_rsi,
	X86_64_OPERAND_REGISTER_rdi,
	X86_64_OPERAND_REGISTER_r8,
	X86_64_OPERAND_REGISTER_r9,
	X86_64_OPERAND_REGISTER_r10,
	X86_64_OPERAND_REGISTER_r11,
	X86_64_OPERAND_REGISTER_r12,
	X86_64_OPERAND_REGISTER_r13,
	X86_64_OPERAND_REGISTER_r14,
	X86_64_OPERAND_REGISTER_r15,

	X86_64_OPERAND_REGISTER_invalid,
} X86_64_Operand_Register;

#define X86_64_OPERAND_REGISTER_xmm(n) ((n))
#define X86_64_OPERAND_REGISTER_ymm(n) ((n))
#define X86_64_OPERAND_REGISTER_zmm(n) ((n))

#define MAKE_OPERANDS0() (0u)
#define MAKE_OPERANDS1(op) ((op) << 24u)
#define MAKE_OPERANDS2(op1, op2) (MAKE_OPERANDS1(op1) | ((op2) << 16u))
#define MAKE_OPERANDS3(op1, op2, op3) (MAKE_OPERANDS2(op1, op2) | ((op3) << 8u))
#define MAKE_OPERANDS4(op1, op2, op3, op4) (MAKE_OPERANDS3(op1, op2, op3) | (op4))

#define GET_MACRO(_0, _1, _2, _3, _4, NAME, ...) NAME
#define MAKE_OPERANDS(...) GET_MACRO(_0, ##__VA_ARGS__, MAKE_OPERANDS4, MAKE_OPERANDS3, MAKE_OPERANDS2, MAKE_OPERANDS1, MAKE_OPERANDS0)(__VA_ARGS__)

#define GET_OPERAND0(operands) ((operands >> 24u) & 0xFF)
#define GET_OPERAND1(operands) ((operands >> 16u) & 0xFF)
#define GET_OPERAND2(operands) ((operands >> 8u) & 0xFF)
#define GET_OPERAND3(operands) (operands & 0xFF)

/* 31    24 23    16 15     8 7      0 */
/* 00000000 00000000 00000000 00000000 */

#define mod_rm(r) ((((uint32_t)OPERANDS_TYPE_modrm) << 5) | ((uint32_t)r) & 0xF)
#define mod_m(r) ((((uint32_t)OPERANDS_TYPE_modm) << 5) | ((uint32_t)r) & 0xF)
#define mod_r(r) ((((uint32_t)OPERANDS_TYPE_modr) << 5) | ((uint32_t)r) & 0xF)
#define mod_reg(r) ((((uint32_t)OPERANDS_TYPE_modreg) << 5) | ((uint32_t)r) & 0xF)
#define add_to_opcode (((uint32_t)OPERANDS_TYPE_add_to_opcode) << 5)
#define imm (((uint32_t)OPERANDS_TYPE_imm) << 5)
#define vex_vvvv (((uint32_t)OPERANDS_TYPE_vex_vvvv) << 5)

enum {
	OPCODE_ADD,
	OPCODE_ADC,
	OPCODE_AND,
	OPCODE_CALL,
	OPCODE_CBW,
	OPCODE_CWDE,
	OPCODE_CDQE,
	OPCODE_CWD,
	OPCODE_CDQ,
	OPCODE_CQO,
	OPCODE_CLC,
	OPCODE_CLI,
	OPCODE_CLD,
	OPCODE_CMC,

	OPCODE_CMOVO,
	OPCODE_CMOVNO,
	OPCODE_CMOVB,
	OPCODE_CMOVAE,
	OPCODE_CMOVE,
	OPCODE_CMOVNE,
	OPCODE_CMOVBE,
	OPCODE_CMOVA,
	OPCODE_CMOVS,
	OPCODE_CMOVNS,
	OPCODE_CMOVPE,
	OPCODE_CMOVPO,
	OPCODE_CMOVL,
	OPCODE_CMOVGE,
	OPCODE_CMOVLE,
	OPCODE_CMOVG,

	OPCODE_CMP,
	OPCODE_CMPSB,
	OPCODE_CMPSW,
	OPCODE_CMPSD,
	OPCODE_CMPSQ,
	OPCODE_CPUID,
	OPCODE_DEC,
	OPCODE_DIV,
	OPCODE_FWAIT,
	OPCODE_HLT,
	OPCODE_IDIV,
	OPCODE_IN,
	OPCODE_INSB,
	OPCODE_INSW,
	OPCODE_INSD,
	OPCODE_INC,
	OPCODE_INT,
	OPCODE_INT1,
	OPCODE_INT3,
	OPCODE_INTO,
	OPCODE_IMUL,
	OPCODE_IRET,
	OPCODE_IRETD,
	OPCODE_IRETQ,

	OPCODE_JMP,
	OPCODE_JO,
	OPCODE_JNO,
	OPCODE_JA,
	OPCODE_JAE,
	OPCODE_JB,
	OPCODE_JBE,
	OPCODE_JC,
	OPCODE_JCXZ,
	OPCODE_JECXZ,
	OPCODE_JRCXZ,
	OPCODE_JE,
	OPCODE_JNE,
	OPCODE_JS,
	OPCODE_JNS,
	OPCODE_JPE,
	OPCODE_JPO,
	OPCODE_JG,
	OPCODE_JGE,
	OPCODE_JL,
	OPCODE_JLE,

	OPCODE_LAHF,
	OPCODE_LEA,
	OPCODE_LODSB,
	OPCODE_LODSW,
	OPCODE_LODSD,
	OPCODE_LODSQ,
	OPCODE_LOOP,
	OPCODE_LOOPE,
	OPCODE_LOOPNE,

	OPCODE_MOV,
	OPCODE_MOVSB,
	OPCODE_MOVSW,
	OPCODE_MOVSD,
	OPCODE_MOVSQ,
	OPCODE_MOVXSD,

	OPCODE_MUL,
	OPCODE_NEG,
	OPCODE_NOT,

	OPCODE_OR,
	OPCODE_OUT,
	OPCODE_OUTSB,
	OPCODE_OUTSW,
	OPCODE_OUTSD,
	OPCODE_POP,
	OPCODE_POPF,
	OPCODE_POPFQ,
	OPCODE_PUSH,
	OPCODE_PUSHF,
	OPCODE_PUSHFQ,
	OPCODE_RET,
	OPCODE_RET_FAR,
	OPCODE_RCL,
	OPCODE_RCR,
	OPCODE_ROL,
	OPCODE_ROR,
	OPCODE_SAHF,
	OPCODE_SAL,
	OPCODE_SAR,
	OPCODE_SBB,
	OPCODE_SCASB,
	OPCODE_SCASW,
	OPCODE_SCASD,
	OPCODE_SCASQ,
	OPCODE_SHL,
	OPCODE_SHR,
	OPCODE_STC,
	OPCODE_STI,
	OPCODE_STD,
	OPCODE_STOSB,
	OPCODE_STOSW,
	OPCODE_STOSD,
	OPCODE_STOSQ,
	OPCODE_SUB,
	OPCODE_SYSCALL,

	OPCODE_SETO,
	OPCODE_SETNO,
	OPCODE_SETB,
	OPCODE_SETAE,
	OPCODE_SETE,
	OPCODE_SETNE,
	OPCODE_SETBE,
	OPCODE_SETA,
	OPCODE_SETS,
	OPCODE_SETNS,
	OPCODE_SETPE,
	OPCODE_SETPO,
	OPCODE_SETL,
	OPCODE_SETGE,
	OPCODE_SETLE,
	OPCODE_SETG,

	OPCODE_TEST,
	OPCODE_XCHG,
	OPCODE_XLAT,
	OPCODE_XOR,



	OPCODE_ADDPS,
	OPCODE_ADDPD,
	OPCODE_ADDSS,
	OPCODE_ADDSD,
	OPCODE_MULPS,
	OPCODE_MULPD,
	OPCODE_MULSS,
	OPCODE_MULSD,
	OPCODE_SUBPS,
	OPCODE_SUBPD,
	OPCODE_SUBSS,
	OPCODE_SUBSD,
	OPCODE_MINPS,
	OPCODE_MINPD,
	OPCODE_MINSS,
	OPCODE_MINSD,
	OPCODE_DIVPS,
	OPCODE_DIVPD,
	OPCODE_DIVSS,
	OPCODE_DIVSD,
	OPCODE_MAXPS,
	OPCODE_MAXPD,
	OPCODE_MAXSS,
	OPCODE_MAXSD,
	OPCODE_SQRTPS,
	OPCODE_SQRTPD,
	OPCODE_SQRTSS,
	OPCODE_SQRTSD,
	OPCODE_RSQRTPS,
	OPCODE_RSQRTSS,
	OPCODE_RCPPS,
	OPCODE_RCPSS,

	OPCODE_ANDPS,
	OPCODE_ANDPD,
	OPCODE_ANDNPS,
	OPCODE_ANDNPD,
	OPCODE_ORPS,
	OPCODE_ORPD,
	OPCODE_XORPS,
	OPCODE_XORPD,

	OPCODE_PUNPCKLBW,
	OPCODE_PUNPCKLWD,
	OPCODE_PUNPCKLDQ,
	OPCODE_PUNPCKLQDQ,
	OPCODE_PACKSSWB,
	OPCODE_PCMPGTB,
	OPCODE_PCMPGTW,
	OPCODE_PCMPGTD,
	OPCODE_PACKUSWB,
	OPCODE_PUNPCKHBW,
	OPCODE_PUNPCKHWD,
	OPCODE_PUNPCKHDQ,
	OPCODE_PUNPCKHQDQ,
	OPCODE_PACKSSDW,

	OPCODE_PSHUFB,
	OPCODE_PSHUFW,
	OPCODE_PSHUFD,
	OPCODE_PSHUFHW,
	OPCODE_PSHUFLW,

	OPCODE_PSRLW,
	OPCODE_PSRLD,
	OPCODE_PSRLQ,
	OPCODE_PADDQ,
	OPCODE_PMULLW,
	OPCODE_PAVGB,
	OPCODE_PSRAW,
	OPCODE_PSRAD,
	OPCODE_PAVGW,
	OPCODE_PMULHUW,
	OPCODE_PMULHW,
	OPCODE_PSLLW,
	OPCODE_PSLLD,
	OPCODE_PSLLQ,
	OPCODE_PMULUDQ,
	OPCODE_PMADDWD,
	OPCODE_PSADBW,
	OPCODE_PSUBUSB,
	OPCODE_PSUBUSW,
	OPCODE_PMINUB,
	OPCODE_PAND,
	OPCODE_PADDUSB,
	OPCODE_PADDUSW,
	OPCODE_PMAXUB,
	OPCODE_PANDN,
	OPCODE_PSUBSB,
	OPCODE_PSUBSW,
	OPCODE_PMINSW,
	OPCODE_POR,
	OPCODE_PADDSB,
	OPCODE_PADDSW,
	OPCODE_PMAXSW,
	OPCODE_PXOR,
	OPCODE_PSUBB,
	OPCODE_PSUBW,
	OPCODE_PSUBD,
	OPCODE_PSUBQ,
	OPCODE_PADDB,
	OPCODE_PADDW,
	OPCODE_PADDD,

	OPCODE_CMPEQB,
	OPCODE_CMPEQW,
	OPCODE_CMPEQD,
	OPCODE_COMISS,
	OPCODE_COMISD,

	OPCODE_CVTDQ2PD,
	OPCODE_CVTDQ2PS,
	OPCODE_CVTPD2DQ,
	OPCODE_CVTPD2PI,
	OPCODE_CVTPD2PS,
	OPCODE_CVTPI2PD,
	OPCODE_CVTPI2PS,
	OPCODE_CVTPS2DQ,
	OPCODE_CVTPS2PD,
	OPCODE_CVTPS2PI,
	OPCODE_CVTSD2SI,
	OPCODE_CVTSD2SS,
	OPCODE_CVTSI2SD,
	OPCODE_CVTSI2SS,
	OPCODE_CVTSS2SD,
	OPCODE_CVTSS2SI,
	OPCODE_CVTTPD2DQ,
	OPCODE_CVTTPD2PI,
	OPCODE_CVTTPS2DQ,
	OPCODE_CVTTPS2PI,
	OPCODE_CVTTSD2SI,
	OPCODE_CVTTSS2SI,

	OPCODE_EMMS,
	OPCODE_HADDPD,
	OPCODE_HADDPS,
	OPCODE_HSUBPD,
	OPCODE_HSUBPS,

	OPCODE_MOVAPS,
	OPCODE_MOVAPD,
	OPCODE_MOVLPS,
	OPCODE_MOVHPS,
	OPCODE_MOVHPD,
	OPCODE_MOVHLPS,
	OPCODE_MOVLHPS,
	OPCODE_MOVLPD,
	OPCODE_MOVMSKPS,
	OPCODE_MOVMSKPD,
	OPCODE_MOVNTPS,
	OPCODE_MOVNTPD,
	OPCODE_MOVUPS,
	OPCODE_MOVUPD,
	OPCODE_MOVSS,
	/* OPCODE_MOVSD, */
	OPCODE_MOVSLDUP,
	OPCODE_MOVSHDUP,
	OPCODE_MOVDDUP,
	OPCODE_MOVD,
	OPCODE_MOVQ,
	OPCODE_MOVDQA,
	OPCODE_MOVDQU,
	OPCODE_UCOMISS,
	OPCODE_UCOMISD,
	OPCODE_UNPCKLPS,
	OPCODE_UNPCKHPS,

	OPCODE_VADDPS,
	OPCODE_VADDPD,
	OPCODE_VADDSS,
	OPCODE_VADDSD,
	OPCODE_VMULPS,
	OPCODE_VMULPD,
	OPCODE_VMULSS,
	OPCODE_VMULSD,
	OPCODE_VSUBPS,
	OPCODE_VSUBPD,
	OPCODE_VSUBSS,
	OPCODE_VSUBSD,
	OPCODE_VMINPS,
	OPCODE_VMINPD,
	OPCODE_VMINSS,
	OPCODE_VMINSD,
	OPCODE_VDIVPS,
	OPCODE_VDIVPD,
	OPCODE_VDIVSS,
	OPCODE_VDIVSD,
	OPCODE_VMAXPS,
	OPCODE_VMAXPD,
	OPCODE_VMAXSS,
	OPCODE_VMAXSD,
	OPCODE_VSQRTPS,
	OPCODE_VSQRTPD,
	OPCODE_VSQRTSS,
	OPCODE_VSQRTSD,
	OPCODE_VRSQRTPS,
	OPCODE_VRSQRTSS,
	OPCODE_VRCPPS,
	OPCODE_VRCPSS,

	OPCODE_VANDPS,
	OPCODE_VANDPD,
	OPCODE_VANDNPS,
	OPCODE_VANDNPD,
	OPCODE_VORPS,
	OPCODE_VORPD,
	OPCODE_VXORPS,
	OPCODE_VXORPD,

	OPCODE_VHADDPD,
	OPCODE_VHADDPS,
	OPCODE_VHSUBPD,
	OPCODE_VHSUBPS,

	OPCODE_VPUNPCKLBW,
	OPCODE_VPUNPCKLWD,
	OPCODE_VPUNPCKLDQ,
	OPCODE_VPUNPCKLQDQ,
	OPCODE_VPACKSSWB,
	OPCODE_VPCMPGTB,
	OPCODE_VPCMPGTW,
	OPCODE_VPCMPGTD,
	OPCODE_VPACKUSWB,
	OPCODE_VPUNPCKHBW,
	OPCODE_VPUNPCKHWD,
	OPCODE_VPUNPCKHDQ,
	OPCODE_VPUNPCKHQDQ,
	OPCODE_VPACKSSDW,
	OPCODE_VPSHUFD,
	OPCODE_VPSHUFHW,
	OPCODE_VPSHUFLW,

	OPCODE_VPSRLW,
	OPCODE_VPSRLD,
	OPCODE_VPSRLQ,
	OPCODE_VPADDQ,
	OPCODE_VPMULLW,
	OPCODE_VPAVGB,
	OPCODE_VPSRAW,
	OPCODE_VPSRAD,
	OPCODE_VPAVGW,
	OPCODE_VPMULHUW,
	OPCODE_VPMULHW,
	OPCODE_VPSLLW,
	OPCODE_VPSLLD,
	OPCODE_VPSLLQ,
	OPCODE_VPMULUDQ,
	OPCODE_VPMADDWD,
	OPCODE_VPSADBW,
	OPCODE_VPSUBUSB,
	OPCODE_VPSUBUSW,
	OPCODE_VPMINUB,
	OPCODE_VPAND,
	OPCODE_VPADDUSB,
	OPCODE_VPADDUSW,
	OPCODE_VPMAXUB,
	OPCODE_VPANDN,
	OPCODE_VPSUBSB,
	OPCODE_VPSUBSW,
	OPCODE_VPMINSW,
	OPCODE_VPOR,
	OPCODE_VPADDSB,
	OPCODE_VPADDSW,
	OPCODE_VPMAXSW,
	OPCODE_VPXOR,
	OPCODE_VPSUBB,
	OPCODE_VPSUBW,
	OPCODE_VPSUBD,
	OPCODE_VPSUBQ,
	OPCODE_VPADDB,
	OPCODE_VPADDW,
	OPCODE_VPADDD,

	OPCODE_VCMPEQB,
	OPCODE_VCMPEQW,
	OPCODE_VCMPEQD,
	OPCODE_VCOMISS,
	OPCODE_VCOMISD,
	OPCODE_VCVTSI2SD,
	OPCODE_VCVTSI2SS,
	OPCODE_VCVTSS2SI,
	OPCODE_VCVTTSS2SI,
	OPCODE_VCVTSD2SI,
	OPCODE_VCVTTSD2SI,
	OPCODE_VCVTPS2PD,
	OPCODE_VCVTPD2PS,
	OPCODE_VCVTSS2SD,
	OPCODE_VCVTSD2SS,
	OPCODE_VCVTDQ2PS,
	OPCODE_VCVTPS2DQ,
	OPCODE_VCVTTPS2DQ,
	OPCODE_VMOVAPS,
	OPCODE_VMOVAPD,
	OPCODE_VMOVLPS,
	OPCODE_VMOVHPS,
	OPCODE_VMOVHPD,
	OPCODE_VMOVHLPS,
	OPCODE_VMOVLHPS,
	OPCODE_VMOVLPD,
	OPCODE_VMOVMSKPS,
	OPCODE_VMOVMSKPD,
	OPCODE_VMOVNTPS,
	OPCODE_VMOVNTPD,
	OPCODE_VMOVUPS,
	OPCODE_VMOVUPD,
	OPCODE_VMOVSS,
	OPCODE_VMOVSD,
	OPCODE_VMOVSLDUP,
	OPCODE_VMOVSHDUP,
	OPCODE_VMOVDDUP,
	OPCODE_VMOVD,
	OPCODE_VMOVQ,
	OPCODE_VMOVDQA,
	OPCODE_VMOVDQU,
	OPCODE_VUCOMISS,
	OPCODE_VUCOMISD,
	OPCODE_VUNPCKLPS,
	OPCODE_VUNPCKHPS,
	OPCODE_VZEROALL,
	OPCODE_VZEROUPPER,
};

typedef enum {
	OPERANDS_TYPE_modrm = 0,
	OPERANDS_TYPE_modreg,
	OPERANDS_TYPE_add_to_opcode,
	OPERANDS_TYPE_imm,
	OPERANDS_TYPE_vex_vvvv,
	OPERANDS_TYPE_modm,
	OPERANDS_TYPE_modr,
} X86_64_Operands_Type;

// TODO: maybe add __attribute__((packed))
typedef struct {
	uint32_t operands; // top 3 is Operands_Type, next 1 is don't add rex, bottom 4 is argument
	uint16_t opcode;
} X86_64_Instruction_Variant;

// clang -E backends/x86_64_common.c | grep -Po
// noarg, al_i8, ax_i16, eax_i32, rax_i32, ax_i8,  eax_i8, ax_r16, eax_r32, rax_r64, al_dx, ax_dx,  eax_dx, rm8, rm16,  rm32, rm64, rm8_cl, rm16_cl,  rm32_cl, rm64_cl, rm16_r16, rm64_r64, r16, r32, r64, r16_rm16, r64_rm64, r8_i8, r16_i16, r32_i32, r64_i64, rm8_i8, rm16_i16, rm32_i32, rm64_i32, rm16_i8, rm32_i8, rm64_i8, i8, i16, i32, rel8, rel16, rel32, r16_rm16_i8, r16_rm16_i16, r32_rm32_i32, r64_rm64_i32, r8_rm8, r32_rm32, rm32_r32, rm8_r8, r128_rm128, r256_rm256, rm128_r128, rm256_r256, r64_rm32, rm32_r64, r32_rm32_i8, r64_rm64_i8, r128_rm128_i8, r256_rm256_i8, r128_vvvv_rm128, r256_vvvv_rm256, r128_vvvv_rm32, r128_vvvv_rm64, r128_rm32, r128_rm64, rm32_rm128, rm64_rm128, rm32_r128, rm64_r128, r32_rm128, r64_rm128, r32_rm256
// \.noarg\s*\= |\.al_i8\s*\= |\.ax_i16\s*\= |\.eax_i32\s*\= |\.rax_i32\s*\= |\.ax_i8\s*\= |\. eax_i8\s*\= |\.ax_r16\s*\= |\.eax_r32\s*\= |\.rax_r64\s*\= |\.al_dx\s*\= |\.ax_dx\s*\= |\. eax_dx\s*\= |\.rm8\s*\= |\.rm16\s*\= |\. rm32\s*\= |\.rm64\s*\= |\.rm8_cl\s*\= |\.rm16_cl\s*\= |\. rm32_cl\s*\= |\.rm64_cl\s*\= |\.rm16_r16\s*\= |\.rm64_r64\s*\= |\.r16\s*\= |\.r32\s*\= |\.r64\s*\= |\.r16_rm16\s*\= |\.r64_rm64\s*\= |\.r8_i8\s*\= |\.r16_i16\s*\= |\.r32_i32\s*\= |\.r64_i64\s*\= |\.rm8_i8\s*\= |\.rm16_i16\s*\= |\.rm32_i32\s*\= |\.rm64_i32\s*\= |\.rm16_i8\s*\= |\.rm32_i8\s*\= |\.rm64_i8\s*\= |\.i8\s*\= |\.i16\s*\= |\.i32\s*\= |\.rel8\s*\= |\.rel16\s*\= |\.rel32\s*\= |\.r16_rm16_i8\s*\= |\.r16_rm16_i16\s*\= |\.r32_rm32_i32\s*\= |\.r64_rm64_i32\s*\= |\.r8_rm8\s*\= |\.r32_rm32\s*\= |\.rm32_r32\s*\= |\.rm8_r8\s*\= |\.r128_rm128\s*\= |\.r256_rm256\s*\= |\.rm128_r128\s*\= |\.rm256_r256\s*\= |\.r64_rm32\s*\= |\.rm32_r64\s*\= |\.r32_rm32_i8\s*\= |\.r64_rm64_i8\s*\= |\.r128_rm128_i8\s*\= |\.r256_rm256_i8\s*\= |\.r128_vvvv_rm128\s*\= |\.r256_vvvv_rm256\s*\= |\.r128_vvvv_rm32\s*\= |\.r128_vvvv_rm64\s*\= |\.r128_rm32\s*\= |\.r128_rm64\s*\= |\.rm32_rm128\s*\= |\.rm64_rm128\s*\= |\.rm32_r128\s*\= |\.rm64_r128\s*\= |\.r32_rm128\s*\= |\.r64_rm128\s*\= |\.r32_rm256

typedef struct {
	X86_64_Instruction_Variant
		noarg,
		al_i8, ax_i16, eax_i32, rax_i32,
			   ax_i8,  eax_i8,
		       ax_r16, eax_r32, rax_r64,
		al_dx, ax_dx,  eax_dx,
		rm8, rm16,  rm32, rm64,
		rm8_cl, rm16_cl,  rm32_cl, rm64_cl,
		/* rm8_r8, */ rm16_r16, /* rm32_r32, */ rm64_r64,
		r16, r32, r64,
		/* r8_rm8, */ r16_rm16, /* r32_rm32, */ r64_rm64,
		r8_i8, r16_i16, r32_i32, r64_i64,
		rm8_i8, rm16_i16, rm32_i32, rm64_i32, rm16_i8, rm32_i8, rm64_i8,
		i8, i16, i32,
		rel8, rel16, rel32,
		r16_rm16_i8, 
		r16_rm16_i16, r32_rm32_i32, r64_rm64_i32;

	union {
		struct { X86_64_Instruction_Variant r8_rm8, r32_rm32, rm32_r32, rm8_r8; };
		struct { X86_64_Instruction_Variant r128_rm128, r256_rm256, rm128_r128, rm256_r256, r64_rm32, rm32_r64; };
	};
	union {
		struct { X86_64_Instruction_Variant r32_rm32_i8, r64_rm64_i8; };
		struct { X86_64_Instruction_Variant r128_rm128_i8, r256_rm256_i8; };
	};
		
	X86_64_Instruction_Variant r128_vvvv_rm128, r256_vvvv_rm256,
							   r128_vvvv_rm32,	r128_vvvv_rm64,
							   r128_rm32, r128_rm64,
							   rm32_rm128, rm64_rm128,
							   rm32_r128, rm64_r128,
							   r32_rm128, r64_rm128,
							   r32_rm256;
} X86_64_Instruction;

typedef enum {
	X86_64_VARIANT_KIND_noarg,

	X86_64_VARIANT_KIND_al_i8,
   	X86_64_VARIANT_KIND_ax_i16,
   	X86_64_VARIANT_KIND_eax_i32,
   	X86_64_VARIANT_KIND_rax_i32,

   	X86_64_VARIANT_KIND_ax_i8,
   	X86_64_VARIANT_KIND_eax_i8,

   	X86_64_VARIANT_KIND_ax_r16,
   	X86_64_VARIANT_KIND_eax_r32,
   	/* X86_64_VARIANT_KIND_rax_r32, */

   	X86_64_VARIANT_KIND_al_dx,
   	X86_64_VARIANT_KIND_ax_dx,
   	X86_64_VARIANT_KIND_eax_dx,

	X86_64_VARIANT_KIND_rm8,
	X86_64_VARIANT_KIND_rm16,
	X86_64_VARIANT_KIND_rm32,
	X86_64_VARIANT_KIND_rm64,

	X86_64_VARIANT_KIND_rm8_r8,
	X86_64_VARIANT_KIND_rm16_r16,
	X86_64_VARIANT_KIND_rm32_r32,
	X86_64_VARIANT_KIND_rm64_r64,

	X86_64_VARIANT_KIND_rm8_cl,
	X86_64_VARIANT_KIND_rm16_cl,
	X86_64_VARIANT_KIND_rm32_cl,
	X86_64_VARIANT_KIND_rm64_cl,

	X86_64_VARIANT_KIND_r16,
	X86_64_VARIANT_KIND_r32,
	X86_64_VARIANT_KIND_r64,

	X86_64_VARIANT_KIND_r8_rm8,
	X86_64_VARIANT_KIND_r16_rm16,
	X86_64_VARIANT_KIND_r32_rm32,
	X86_64_VARIANT_KIND_r64_rm64,

	X86_64_VARIANT_KIND_r8_i8,
	X86_64_VARIANT_KIND_r16_i16,
	X86_64_VARIANT_KIND_r32_i32,
	X86_64_VARIANT_KIND_r64_i64,

	X86_64_VARIANT_KIND_rm8_i8,
	X86_64_VARIANT_KIND_rm16_i16,
	X86_64_VARIANT_KIND_rm32_i32,
	X86_64_VARIANT_KIND_rm64_i32,
	X86_64_VARIANT_KIND_rm16_i8,
	X86_64_VARIANT_KIND_rm32_i8,
	X86_64_VARIANT_KIND_rm64_i8,

	X86_64_VARIANT_KIND_i8,
	X86_64_VARIANT_KIND_i16,
	X86_64_VARIANT_KIND_i32,

	X86_64_VARIANT_KIND_rel8,
	X86_64_VARIANT_KIND_rel16,
	X86_64_VARIANT_KIND_rel32,

	X86_64_VARIANT_KIND_r16_rm16_i8,
   	X86_64_VARIANT_KIND_r32_rm32_i8,
	X86_64_VARIANT_KIND_r64_rm64_i8,
	X86_64_VARIANT_KIND_r16_rm16_i16,
	X86_64_VARIANT_KIND_r32_rm32_i32,
   	X86_64_VARIANT_KIND_r64_rm64_i32,

	X86_64_VARIANT_KIND_r128_vvvv_rm128,
	X86_64_VARIANT_KIND_r256_vvvv_rm256,

	X86_64_VARIANT_KIND_r128_vvvv_rm32,
	X86_64_VARIANT_KIND_r128_vvvv_rm64,
	X86_64_VARIANT_KIND_r128_rm32,
	X86_64_VARIANT_KIND_r128_rm64,
	X86_64_VARIANT_KIND_rm32_r128,
	X86_64_VARIANT_KIND_rm64_r128,
	X86_64_VARIANT_KIND_r32_rm128,
	X86_64_VARIANT_KIND_r64_rm128,
	X86_64_VARIANT_KIND_r32_rm256,
	X86_64_VARIANT_KIND_rm32_r64,
	X86_64_VARIANT_KIND_r64_rm32,
} X86_64_Variant_Kind;

#define X86_64_VARIANT_KIND_r128_rm128 X86_64_VARIANT_KIND_r8_rm8
#define X86_64_VARIANT_KIND_rm128_r128 X86_64_VARIANT_KIND_rm8_r8
#define X86_64_VARIANT_KIND_r256_rm256 X86_64_VARIANT_KIND_r32_rm32
#define X86_64_VARIANT_KIND_rm256_r256 X86_64_VARIANT_KIND_rm32_r32

#define X86_64_VARIANT_KIND_r128_rm128_i8 X86_64_VARIANT_KIND_r32_rm32_i8
#define X86_64_VARIANT_KIND_r256_rm256_i8 X86_64_VARIANT_KIND_r64_rm64_i8

#define X86_64_REG_BASE (0x10u)

typedef enum {
	X86_64_PREFIX_REP = 0xF3,
	X86_64_PREFIX_REPE = 0xF3,
	X86_64_PREFIX_REPNE = 0xF2,
} X86_64_Prefixes;

#define X86_64_SIB_INDEX (1u << 1u)
#define X86_64_SIB_SCALE (1u << 2u)

typedef struct {
	uint8_t reg0, reg1, reg2, reg3;
	uint8_t scale, index;
	int64_t displacement, immediate, relative;
	uint8_t rep;
	bool use_sib, rbp_is_rip;
} X86_64_Instruction_Parameters;

void x86_64_write_instruction(Compiler_Context* cc, X86_64_Machine_Code_Writer* b, X86_64_Variant_Kind variant, X86_64_Instruction_Variant instruction, X86_64_Instruction_Parameters parameters);
void x86_64_run_tests(Compiler_Context* cc, X86_64_Machine_Code_Writer* b);
extern const X86_64_Instruction x86_64_instructions_table[];
extern const size_t x86_64_instructions_table_size;
extern const X86_64_Operand_Register x86_64_usable_gp_registers[];
extern const size_t x86_64_usable_gp_registers_count;

X86_64_Instruction_Variant x86_64_get_variant(const X86_64_Instruction* inst, X86_64_Variant_Kind kind);

#define X86_64_WRITE_INSTRUCTION(op, variant, parameters) x86_64_write_instruction(cc, (X86_64_Machine_Code_Writer*)b, X86_64_VARIANT_KIND_ ## variant, x86_64_instructions_table[op] . variant, parameters)
#define X86_64_WRITE_INSTRUCTION_DYN(op, variant, parameters) x86_64_write_instruction(cc, (X86_64_Machine_Code_Writer*)b, variant, x86_64_get_variant(&x86_64_instructions_table[op], variant), parameters)


